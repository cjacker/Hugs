#!/bin/sh

# This script generates:
# $2/packages/*:
#	copies of the heirarchical libraries suitable for
#	use with Hugs.  Note that some of the libraries require extensions
#	to Haskell 98 and have to be run with the -98 flag.
#
# Usage:
#
#   ./convert_libraries <fptools directory> <build directory>
#
# NOTE: This script expects to be run in the top-level hugs98 directory,
# and contains paths relative to there.

case $# in
2)	;;
*)	echo "usage: $0 <fptools directory> <build directory>" >&2
	exit 1 ;;
esac

lib_src=packages
if [ ! -d $lib_src ]; then
	echo "Can't find $lib_src directory" >&2
	exit 1
fi

target="$2"

# parameters set by configure
case $0 in
*/*)	. `dirname $0`/config ;;
*)	. ./config ;;

esac

# Copy package examples (if any) to the demos directory

copy_examples() {
	to_dir=$1
	if [ -d examples ]
	then	$FIND examples -follow -name CVS -prune -o \! -name .cvsignore \! -name Makefile \! -name makefile -type f -print |
			sed 's:^examples/::' |
			while read name
			do
				target_file="$to_dir/$name"
				mkdir -p `dirname $target_file`
				cp examples/$name $target_file
			done
	fi
}

# Convert hierarchical modules

# top directory relative to package directories.
# absolute names won't work from Hugs on MSYS
top_dir=../..

HUGSDIR="$top_dir/$target"
HUGSFLAGS="-P{Hugs}/packages/*"
export HUGSDIR HUGSFLAGS

# extension for batch files/shell scripts
case `uname -a` in
CYGWIN*|MINGW32*) bat=.bat ;;
*) bat= ;;
esac

build_package() {
	source_dir=$1
	pkg=`basename $1`
	target_dir="$target/packages/$pkg"
	cd $source_dir

	runhugs=$top_dir/src/runhugs
	ffihugs=$top_dir/src/ffihugs

	# Copy the setup script into an empty directory, so that runhugs
	# won't attempt to load modules from the package.
	# (Specifically the base and Cabal packages)
	setup_dir=$top_dir/libraries/tmp
	mkdir -p $setup_dir
	if test -f Setup.lhs
	then	cp Setup.lhs $setup_dir
		setup_script=$setup_dir/Setup.lhs
	elif test -f Setup.hs
	then	cp Setup.hs $setup_dir
		setup_script=$setup_dir/Setup.hs
	else	setup_script=$top_dir/cabal/cabal.hs
	fi
	HugsSetup="$runhugs -98 $setup_script"

	# Setup extra flags for packages.

	# HACK: 'process' can NOT built to 'packages' dir direcly!
	# runhugs/cabal depend on 'process' pkg installed in 'packages' dir
	# to work properly.
	# when a cabal pkg building, it will build hs first, then
	# build the related ffi libs.
	# if directly built to 'packages' dir, after 'hs' generated,
	# it will break cabal immediately, since ffi libs not get built.
	
	# here, build it to packages.stage2, and move to packages after all packages built.
 
	case "$source_dir" in
	*/haskell-src)
		extra_flags="--with-happy=$top_dir/libraries/tools/happy$bat" ;;
	*/process)
		extra_flags="--extra-include-dirs=$top_dir/packages/base/include"
		target_dir="$target/packages.stage2/$pkg" ;;
	*/directory)
		extra_flags="--extra-include-dirs=$top_dir/src" ;;
	*/base)
		extra_flags="--extra-include-dirs=$top_dir/src" ;;
	*/QuickCheck)
		extra_flags="--flags=-base3 --flags=base4" ;;
	*)  extra_flags= ;;
	esac

	export PATH="$top_dir/src:$PATH"

	$HugsSetup configure --verbose --hugs \
			--prefix="$PREFIX" \
			--scratchdir="$top_dir/$target_dir" \
			--with-hsc2hs="$top_dir/libraries/tools/hsc2hs$bat" \
			--with-cpphs="$top_dir/libraries/tools/cpphs$bat" \
			--with-compiler="$ffihugs" \
			--with-hugs="$top_dir/src/hugs" \
			$extra_flags

	if $HugsSetup build --verbose; then
		for name in LICEN[CS]E* COPYING* COPYRIGHT* copyright; do
			if test -f $name; then
				cp $name $top_dir/$target_dir
			fi
		done
		rm -rf $top_dir/$target_dir/autogen
		copy_examples $top_dir/$target/demos/$pkg
	else	echo "Skipping $pkg package"
	fi
	cd "$top_dir"
}

Win32=
case `uname -a` in
CYGWIN*|MINGW32*) Win32="Win32" ;;
esac
packages="base array old-locale old-time directory unix process random haskell98 filepath pretty containers Cabal bytestring haskell-src QuickCheck mtl fgl HaXml parsec html network HUnit $Win32 X11 HGL OpenGL GLUT OpenAL ALUT time stm xhtml regex-base regex-posix regex-compat regex-tdfa hscolour FiniteMap alex"

build_package libraries/hugsbase

for package in $packages
do
	if test -d $lib_src/$package; then
		build_package $lib_src/$package
	fi
done

#move 'process' from packages.stage2 to packages.
if [ -f "$target/packages.stage2/process/System/Process/Internals.so" ];
then
	mkdir -p $target/packages.bootlib
	rm -rf $target/packages.bootlib/process
	mv $target/packages/process $target/packages.bootlib/
	mv $target/packages.stage2/process $target/packages/process 
fi 

if [ -d "$target/packages/hscolour/programs/HsColour" ];
then
	mv $target/packages/hscolour/programs/HsColour $target/programs
    rm -rf $target/packages/hscolour/programs
fi

if [ -d "$target/packages/alex/programs/alex" ];
then
	mv $target/packages/alex/programs/alex $target/programs
    rm -rf $target/packages/alex
fi
