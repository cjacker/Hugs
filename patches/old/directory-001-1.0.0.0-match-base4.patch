diff --color -Nur directory-1.0.0.0/dist/build/autogen/cabal_macros.h directory.old.ok/dist/build/autogen/cabal_macros.h
--- directory-1.0.0.0/dist/build/autogen/cabal_macros.h	1970-01-01 08:00:00.000000000 +0800
+++ directory.old.ok/dist/build/autogen/cabal_macros.h	2019-05-11 16:48:46.082661437 +0800
@@ -0,0 +1,20 @@
+/* DO NOT EDIT: This file is automatically generated by Cabal */
+
+/* package base */
+#define MIN_VERSION_base(major1,major2,minor) \
+  (major1) <  0 || \
+  (major1) == 0 && (major2) <  0 || \
+  (major1) == 0 && (major2) == 0 && (minor) <= 0
+
+/* package filepath */
+#define MIN_VERSION_filepath(major1,major2,minor) \
+  (major1) <  0 || \
+  (major1) == 0 && (major2) <  0 || \
+  (major1) == 0 && (major2) == 0 && (minor) <= 0
+
+/* package old-time */
+#define MIN_VERSION_old_time(major1,major2,minor) \
+  (major1) <  0 || \
+  (major1) == 0 && (major2) <  0 || \
+  (major1) == 0 && (major2) == 0 && (minor) <= 0
+
diff --color -Nur directory-1.0.0.0/dist/build/autogen/Paths_directory.hs directory.old.ok/dist/build/autogen/Paths_directory.hs
--- directory-1.0.0.0/dist/build/autogen/Paths_directory.hs	1970-01-01 08:00:00.000000000 +0800
+++ directory.old.ok/dist/build/autogen/Paths_directory.hs	2019-05-11 16:48:46.082661437 +0800
@@ -0,0 +1,29 @@
+module Paths_directory (
+    version,
+    getBinDir, getLibDir, getDataDir, getLibexecDir,
+    getDataFileName
+  ) where
+
+import Data.Version (Version(..))
+import System.Environment (getEnv)
+
+version :: Version
+version = Version {versionBranch = [1,0,0,0], versionTags = []}
+
+bindir, libdir, datadir, libexecdir :: FilePath
+
+bindir     = "/usr/bin"
+libdir     = "/usr/lib/hugs/packages/directory"
+datadir    = "/usr/share/directory-1.0.0.0"
+libexecdir = "/usr/libexec"
+
+getBinDir, getLibDir, getDataDir, getLibexecDir :: IO FilePath
+getBinDir = catch (getEnv "directory_bindir") (\_ -> return bindir)
+getLibDir = catch (getEnv "directory_libdir") (\_ -> return libdir)
+getDataDir = catch (getEnv "directory_datadir") (\_ -> return datadir)
+getLibexecDir = catch (getEnv "directory_libexecdir") (\_ -> return libexecdir)
+
+getDataFileName :: FilePath -> IO FilePath
+getDataFileName name = do
+  dir <- getDataDir
+  return (dir ++ "/" ++ name)
diff --color -Nur directory-1.0.0.0/dist/installed-pkg-config directory.old.ok/dist/installed-pkg-config
--- directory-1.0.0.0/dist/installed-pkg-config	1970-01-01 08:00:00.000000000 +0800
+++ directory.old.ok/dist/installed-pkg-config	2019-05-11 16:48:46.082661437 +0800
@@ -0,0 +1,29 @@
+name: directory
+version: 1.0.0.0
+license: BSD3
+copyright:
+maintainer: libraries@haskell.org
+stability:
+homepage:
+package-url:
+description: This package provides a library for handling directories.
+category:
+author:
+exposed: True
+exposed-modules: System.Directory
+hidden-modules:
+import-dirs: /usr/lib/hugs/packages/directory
+library-dirs: /usr/lib/hugs/packages/directory
+hs-libraries: HSdirectory-1.0.0.0
+extra-libraries:
+extra-ghci-libraries:
+include-dirs: /usr/lib/hugs/packages/directory/include
+includes: HsDirectory.h
+depends: base filepath old-time
+hugs-options:
+cc-options:
+ld-options:
+framework-dirs:
+frameworks:
+haddock-interfaces: /usr/share/doc/directory-1.0.0.0/html/directory.haddock
+haddock-html: /usr/share/doc/directory-1.0.0.0/html
diff --color -Nur directory-1.0.0.0/dist/setup-config directory.old.ok/dist/setup-config
--- directory-1.0.0.0/dist/setup-config	1970-01-01 08:00:00.000000000 +0800
+++ directory.old.ok/dist/setup-config	2019-05-11 16:48:46.082661437 +0800
@@ -0,0 +1,2 @@
+Saved package config for directory-1.0.0.0 written by Cabal-1.6.0.3 using hugs-0.0
+LocalBuildInfo {installDirTemplates = InstallDirs {prefix = "/usr", bindir = "$prefix/bin", libdir = "$prefix/lib", libsubdir = "hugs/packages/$pkg", dynlibdir = "$libdir", libexecdir = "$prefix/libexec", progdir = "$libdir/hugs/programs", includedir = "$libdir/$libsubdir/include", datadir = "$prefix/share", datasubdir = "$pkgid", docdir = "$datadir/doc/$pkgid", mandir = "$datadir/man", htmldir = "$docdir/html", haddockdir = "$htmldir"}, compiler = Compiler {compilerId = CompilerId Hugs Version {versionBranch = [], versionTags = []}, compilerExtensions = [(OverlappingInstances,"+o"),(IncoherentInstances,"+oO"),(HereDocuments,"+H"),(TypeSynonymInstances,"-98"),(RecursiveDo,"-98"),(ParallelListComp,"-98"),(MultiParamTypeClasses,"-98"),(FunctionalDependencies,"-98"),(Rank2Types,"-98"),(PolymorphicComponents,"-98"),(ExistentialQuantification,"-98"),(ScopedTypeVariables,"-98"),(ImplicitParams,"-98"),(ExtensibleRecords,"-98"),(RestrictedTypeSynonyms,"-98"),(FlexibleContexts,"-98"),(FlexibleInstances,"-98"),(ForeignFunctionInterface,""),(EmptyDataDecls,""),(CPP,"")]}, buildDir = "dist/build", scratchDir = "../../hugsdir/packages/directory", packageDeps = [PackageIdentifier {pkgName = PackageName "base", pkgVersion = Version {versionBranch = [], versionTags = []}},PackageIdentifier {pkgName = PackageName "filepath", pkgVersion = Version {versionBranch = [], versionTags = []}},PackageIdentifier {pkgName = PackageName "old-time", pkgVersion = Version {versionBranch = [], versionTags = []}}], installedPkgs = PackageIndex (fromList [(PackageName "base",[InstalledPackageInfo {package = PackageIdentifier {pkgName = PackageName "base", pkgVersion = Version {versionBranch = [], versionTags = []}}, license = AllRightsReserved, copyright = "", maintainer = "", author = "", stability = "", homepage = "", pkgUrl = "", description = "", category = "", exposed = False, exposedModules = [], hiddenModules = [], importDirs = [], libraryDirs = [], hsLibraries = [], extraLibraries = [], extraGHCiLibraries = [], includeDirs = [], includes = [], depends = [], hugsOptions = [], ccOptions = [], ldOptions = [], frameworkDirs = [], frameworks = [], haddockInterfaces = [], haddockHTMLs = []}]),(PackageName "filepath",[InstalledPackageInfo {package = PackageIdentifier {pkgName = PackageName "filepath", pkgVersion = Version {versionBranch = [], versionTags = []}}, license = AllRightsReserved, copyright = "", maintainer = "", author = "", stability = "", homepage = "", pkgUrl = "", description = "", category = "", exposed = False, exposedModules = [], hiddenModules = [], importDirs = [], libraryDirs = [], hsLibraries = [], extraLibraries = [], extraGHCiLibraries = [], includeDirs = [], includes = [], depends = [], hugsOptions = [], ccOptions = [], ldOptions = [], frameworkDirs = [], frameworks = [], haddockInterfaces = [], haddockHTMLs = []}]),(PackageName "old-time",[InstalledPackageInfo {package = PackageIdentifier {pkgName = PackageName "old-time", pkgVersion = Version {versionBranch = [], versionTags = []}}, license = AllRightsReserved, copyright = "", maintainer = "", author = "", stability = "", homepage = "", pkgUrl = "", description = "", category = "", exposed = False, exposedModules = [], hiddenModules = [], importDirs = [], libraryDirs = [], hsLibraries = [], extraLibraries = [], extraGHCiLibraries = [], includeDirs = [], includes = [], depends = [], hugsOptions = [], ccOptions = [], ldOptions = [], frameworkDirs = [], frameworks = [], haddockInterfaces = [], haddockHTMLs = []}])]), pkgDescrFile = Just "./directory.cabal", localPkgDescr = PackageDescription {package = PackageIdentifier {pkgName = PackageName "directory", pkgVersion = Version {versionBranch = [1,0,0,0], versionTags = []}}, license = BSD3, licenseFile = "LICENSE", copyright = "", maintainer = "libraries@haskell.org", author = "", stability = "", testedWith = [], homepage = "", pkgUrl = "", bugReports = "", sourceRepos = [], synopsis = "library for directory handling", description = "This package provides a library for handling directories.", category = "", customFieldsPD = [], buildDepends = [Dependency (PackageName "base") AnyVersion,Dependency (PackageName "filepath") AnyVersion,Dependency (PackageName "old-time") AnyVersion], descCabalVersion = AnyVersion, buildType = Just Configure, library = Just Library {exposedModules = [ModuleName ["System","Directory"]], libExposed = True, libBuildInfo = BuildInfo {buildable = True, buildTools = [], cppOptions = [], ccOptions = [], ldOptions = [], pkgconfigDepends = [], frameworks = [], cSources = ["cbits/directory.c"], hsSourceDirs = ["."], otherModules = [], extensions = [CPP,ForeignFunctionInterface], extraLibs = [], extraLibDirs = [], includeDirs = ["include"], includes = ["HsDirectory.h"], installIncludes = ["HsDirectory.h","HsDirectoryConfig.h"], options = [], ghcProfOptions = [], ghcSharedOptions = [], customFieldsBI = []}}, executables = [], dataFiles = [], dataDir = "", extraSrcFiles = [], extraTmpFiles = ["config.log","config.status","autom4te.cache","include/HsDirectoryConfig.h"]}, withPrograms = [("ar",ConfiguredProgram {programId = "ar", programVersion = Nothing, programArgs = [], programLocation = FoundOnSystem {locationPath = "/usr/bin/ar"}}),("cpphs-hugs",ConfiguredProgram {programId = "cpphs-hugs", programVersion = Just Version {versionBranch = [1,11], versionTags = []}, programArgs = [], programLocation = UserSpecified {locationPath = "../../libraries/tools/cpphs"}}),("ffihugs",ConfiguredProgram {programId = "ffihugs", programVersion = Nothing, programArgs = [], programLocation = UserSpecified {locationPath = "../../src/ffihugs"}}),("gcc",ConfiguredProgram {programId = "gcc", programVersion = Just Version {versionBranch = [9,1,0], versionTags = []}, programArgs = [], programLocation = FoundOnSystem {locationPath = "/usr/lib/ccache/gcc"}}),("happy-hugs",ConfiguredProgram {programId = "happy-hugs", programVersion = Just Version {versionBranch = [1,18,4], versionTags = []}, programArgs = [], programLocation = FoundOnSystem {locationPath = "/usr/bin/happy-hugs"}}),("hsc2hs-hugs",ConfiguredProgram {programId = "hsc2hs-hugs", programVersion = Just Version {versionBranch = [0,66], versionTags = []}, programArgs = [], programLocation = UserSpecified {locationPath = "../../libraries/tools/hsc2hs"}}),("hugs",ConfiguredProgram {programId = "hugs", programVersion = Nothing, programArgs = [], programLocation = UserSpecified {locationPath = "../../src/hugs"}}),("ld",ConfiguredProgram {programId = "ld", programVersion = Nothing, programArgs = [], programLocation = FoundOnSystem {locationPath = "/usr/bin/ld"}}),("pkg-config",ConfiguredProgram {programId = "pkg-config", programVersion = Just Version {versionBranch = [0,29,2], versionTags = []}, programArgs = [], programLocation = FoundOnSystem {locationPath = "/usr/bin/pkg-config"}}),("ranlib",ConfiguredProgram {programId = "ranlib", programVersion = Nothing, programArgs = [], programLocation = FoundOnSystem {locationPath = "/usr/bin/ranlib"}}),("strip",ConfiguredProgram {programId = "strip", programVersion = Nothing, programArgs = [], programLocation = FoundOnSystem {locationPath = "/usr/bin/strip"}}),("tar",ConfiguredProgram {programId = "tar", programVersion = Nothing, programArgs = [], programLocation = FoundOnSystem {locationPath = "/usr/bin/tar"}})], withPackageDB = GlobalPackageDB, withVanillaLib = True, withProfLib = False, withSharedLib = False, withProfExe = False, withOptimization = NormalOptimisation, withGHCiLib = True, splitObjs = False, stripExes = True, progPrefix = "", progSuffix = ""}
\ 文件尾没有换行符
diff --color -Nur directory-1.0.0.0/System/Directory.hs directory.old.ok/System/Directory.hs
--- directory-1.0.0.0/System/Directory.hs	2007-11-03 22:42:46.000000000 +0800
+++ directory.old.ok/System/Directory.hs	2019-05-11 16:48:46.082661437 +0800
@@ -81,6 +81,8 @@
 
 #ifdef __HUGS__
 import Hugs.Directory
+import Hugs.IO (hClose, IOMode(..))
+import System.IO
 #endif /* __HUGS__ */
 
 import Foreign
@@ -365,7 +367,7 @@
               case temp of
                 Left e  -> do isDir <- doesDirectoryExist f
                               -- If f is not a directory, re-throw the error
-                              unless isDir $ throw e
+                              unless isDir $ throw (e :: SomeException) 
                               removeDirectoryRecursive f
                 Right _ -> return ()
 
@@ -545,19 +547,17 @@
        return ()
 #else
 copyFile fromFPath toFPath =
-    copy `catch` (\e -> case e of
-                        IOException e ->
-                            throw $ IOException $ ioeSetLocation e "copyFile"
-                        _ -> throw e)
+    copy `catch` (\exc -> throw $ ioeSetLocation exc "copyFile")
     where copy = bracket (openBinaryFile fromFPath ReadMode) hClose $ \hFrom ->
                  bracketOnError openTmp cleanTmp $ \(tmpFPath, hTmp) ->
                  do allocaBytes bufferSize $ copyContents hFrom hTmp
                     hClose hTmp
-                    try (copyPermissions fromFPath tmpFPath)
+                    ignoreIOExceptions $ copyPermissions fromFPath tmpFPath
                     renameFile tmpFPath toFPath
           openTmp = openBinaryTempFile (takeDirectory toFPath) ".copyFile.tmp"
-          cleanTmp (tmpFPath, hTmp) = do try $ hClose hTmp
-                                         try $ removeFile tmpFPath
+          cleanTmp (tmpFPath, hTmp)
+              = do ignoreIOExceptions $ hClose hTmp
+                   ignoreIOExceptions $ removeFile tmpFPath
           bufferSize = 1024
 
           copyContents hFrom hTo buffer = do
@@ -565,6 +565,10 @@
                   when (count > 0) $ do
                           hPutBuf hTo buffer count
                           copyContents hFrom hTo buffer
+
+          ignoreIOExceptions io = io `catch` ioExceptionIgnorer
+          ioExceptionIgnorer :: IOException -> IO ()
+          ioExceptionIgnorer _ = return ()
 #endif
 
 -- | Given path referring to a file or directory, returns a
@@ -1025,7 +1029,9 @@
      r <- c_GetTempPath (fromIntegral long_path_size) pPath
      peekCString pPath
 #else
-  catch (getEnv "TMPDIR") (\ex -> return "/tmp")
+  getEnv "TMPDIR"
+    `catch` \e -> if isDoesNotExistError e then return "/tmp"
+                          else throw e
 #endif
 
 #if defined(mingw32_HOST_OS)
