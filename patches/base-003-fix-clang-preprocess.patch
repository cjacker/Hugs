diff --color -Nur base.orig/Control/Arrow.hs base/Control/Arrow.hs
--- base.orig/Control/Arrow.hs	2019-05-11 17:54:03.987591275 +0800
+++ base/Control/Arrow.hs	2019-05-11 17:57:49.378587239 +0800
@@ -109,8 +109,7 @@
 "compose/first" forall f g .
                 (first f) . (first g) = first (f . g)
 "compose/second" forall f g .
-                (second f) . (second g) = second (f . g)
- #-}
+                (second f) . (second g) = second (f . g) #-}
 
 -- Ordinary functions are arrows.
 
@@ -219,8 +218,7 @@
 "compose/left"  forall f g .
                 left f >>> left g = left (f >>> g)
 "compose/right" forall f g .
-                right f >>> right g = right (f >>> g)
- #-}
+                right f >>> right g = right (f >>> g) #-}
 
 instance ArrowChoice (->) where
         left f = f +++ id
diff --color -Nur base.orig/Foreign/C/Types.hs base/Foreign/C/Types.hs
--- base.orig/Foreign/C/Types.hs	2019-05-11 17:54:03.952591276 +0800
+++ base/Foreign/C/Types.hs	2019-05-11 17:59:05.523585875 +0800
@@ -144,8 +144,7 @@
 "fromIntegral/CLong->a"   fromIntegral = \(CLong   x) -> fromIntegral x
 "fromIntegral/CULong->a"  fromIntegral = \(CULong  x) -> fromIntegral x
 "fromIntegral/CLLong->a"  fromIntegral = \(CLLong  x) -> fromIntegral x
-"fromIntegral/CULLong->a" fromIntegral = \(CULLong x) -> fromIntegral x
- #-}
+"fromIntegral/CULLong->a" fromIntegral = \(CULLong x) -> fromIntegral x #-}
 
 -- | Haskell type representing the C @float@ type.
 FLOATING_TYPE(CFloat,tyConCFloat,"CFloat",HTYPE_FLOAT)
@@ -162,8 +161,7 @@
 
 "realToFrac/CFloat->a"    realToFrac = \(CFloat   x) -> realToFrac x
 "realToFrac/CDouble->a"   realToFrac = \(CDouble  x) -> realToFrac x
-"realToFrac/CLDouble->a"  realToFrac = \(CLDouble x) -> realToFrac x
- #-}
+"realToFrac/CLDouble->a"  realToFrac = \(CLDouble x) -> realToFrac x #-}
 
 -- | Haskell type representing the C @ptrdiff_t@ type.
 INTEGRAL_TYPE(CPtrdiff,tyConCPtrdiff,"CPtrdiff",HTYPE_PTRDIFF_T)
@@ -183,8 +181,7 @@
 "fromIntegral/CPtrdiff->a"   fromIntegral = \(CPtrdiff   x) -> fromIntegral x
 "fromIntegral/CSize->a"      fromIntegral = \(CSize      x) -> fromIntegral x
 "fromIntegral/CWchar->a"     fromIntegral = \(CWchar     x) -> fromIntegral x
-"fromIntegral/CSigAtomic->a" fromIntegral = \(CSigAtomic x) -> fromIntegral x
- #-}
+"fromIntegral/CSigAtomic->a" fromIntegral = \(CSigAtomic x) -> fromIntegral x #-}
 
 -- | Haskell type representing the C @clock_t@ type.
 ARITHMETIC_TYPE(CClock,tyConCClock,"CClock",HTYPE_CLOCK_T)
@@ -213,8 +210,7 @@
 "fromIntegral/a->CIntPtr"  fromIntegral = \x -> CIntPtr  (fromIntegral x)
 "fromIntegral/a->CUIntPtr" fromIntegral = \x -> CUIntPtr (fromIntegral x)
 "fromIntegral/a->CIntMax"  fromIntegral = \x -> CIntMax  (fromIntegral x)
-"fromIntegral/a->CUIntMax" fromIntegral = \x -> CUIntMax (fromIntegral x)
- #-}
+"fromIntegral/a->CUIntMax" fromIntegral = \x -> CUIntMax (fromIntegral x) #-}
 
 -- C99 types which are still missing include:
 -- wint_t, wctrans_t, wctype_t
diff --color -Nur base.orig/Control/Category.hs base/Control/Category.hs
--- base.orig/Control/Category.hs	2019-05-11 17:54:03.987591275 +0800
+++ base/Control/Category.hs	2019-05-11 18:00:56.805583882 +0800
@@ -33,8 +33,7 @@
 "identity/right"        forall p .
                 p . id = p
 "association"   forall p q r .
-                (p . q) . r = p . (q . r)
- #-}
+                (p . q) . r = p . (q . r) #-}
 
 instance Category (->) where
         id = Prelude.id
diff --color -Nur base.orig/Control/Exception.hs base/Control/Exception.hs
--- base.orig/Control/Exception.hs	2019-05-11 17:54:03.988591275 +0800
+++ base/Control/Exception.hs	2019-05-11 18:05:01.412579502 +0800
@@ -159,7 +159,7 @@
 
 {- $async
 
- #AsynchronousExceptions# Asynchronous exceptions are so-called because they arise due to
+ "#AsynchronousExceptions#" Asynchronous exceptions are so-called because they arise due to
 external influences, and can be raised at any point during execution.
 'StackOverflow' and 'HeapOverflow' are two examples of
 system-generated asynchronous exceptions.
diff --color -Nur base.orig/Control/OldException.hs base/Control/OldException.hs
--- base.orig/Control/OldException.hs	2019-05-11 17:54:03.988591275 +0800
+++ base/Control/OldException.hs	2019-05-11 18:05:10.669579336 +0800
@@ -501,7 +501,7 @@
 
 {- $async
 
- #AsynchronousExceptions# Asynchronous exceptions are so-called because they arise due to
+ "#AsynchronousExceptions#" Asynchronous exceptions are so-called because they arise due to
 external influences, and can be raised at any point during execution.
 'StackOverflow' and 'HeapOverflow' are two examples of
 system-generated asynchronous exceptions.
